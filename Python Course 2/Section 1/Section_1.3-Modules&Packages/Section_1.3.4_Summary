1.3.4 SECTION SUMMARY
1. While a module is designed to couple together some related entities such as functions, variables, or constants,
a package is a container which enables the coupling of several related modules under one common name.
Such a container can be distributed as-is (as a batch of files deployed in a directory sub-tree) or it can be packed
inside a zip file.


2. During the very first import of the actual module, Python translates its source code into a semi-compiled format
stored inside the pyc files, and deploys these files into the __pycache__ directory located in the module's home
directory.


3. If you want to tell your module's user that a particular entity should be treated as private
(i.e. not to be explicitly used outside the module) you can mark its name with either the _ or __ prefix.
Don't forget that this is only a recommendation, not an order.


4. The names shabang, shebang, hasbang, poundbang, and hashpling describe the digraph written as #!,
used to instruct Unix-like OSs how the Python source file should be launched.
This convention has no effect under MS Windows.


5. If you want convince Python that it should take into account a non-standard package's directory,
its name needs to be inserted/appended into/to the import directory list stored in the path variable contained
in the sys module.


6. A Python file named __init__.py is implicitly run when a package containing it is subject to import,
and is used to initialize a package and/or its sub-packages (if any). The file may be empty, but must not be absent.

